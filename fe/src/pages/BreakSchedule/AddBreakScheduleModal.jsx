import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Typography,
  TextField,
  Button,
  Box,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert, // Thêm Alert cho thông báo lỗi/thành công
  CircularProgress, // Thêm CircularProgress cho trạng thái loading
  IconButton, // Thêm IconButton cho nút đóng
  Divider, // Thêm Divider để phân cách
} from '@mui/material';
import CloseIcon from '@mui/icons-material/Close'; // Icon đóng modal
import CloudUploadIcon from '@mui/icons-material/CloudUpload'; // Icon tải file lên
import * as XLSX from 'xlsx';
import PreviewBreakScheduleModal from './PreviewBreakScheduleModal';

const validStatuses = ['Hoạt động', 'Ngừng hoạt động'];

export default function AddBreakScheduleModal({ open, onClose, onAddBreakSchedule, onImportSuccess, existingBreakSchedules, loading, error: apiError, message: apiMessage }) {
  const [newBreakSchedule, setNewBreakSchedule] = useState({
    break_id: '',
    break_type: '',
    break_start_date: '',
    break_end_date: '',
    status: 'Hoạt động',
  });

  const [localError, setLocalError] = useState(''); // Sử dụng localError cho validation client-side
  const [showPreview, setShowPreview] = useState(false);
  const [previewData, setPreviewData] = useState([]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewBreakSchedule((prev) => ({ ...prev, [name]: value }));
    setLocalError(''); // Clear local errors when user starts typing
  };

  const handleSubmit = async () => {
    // --- Client-side validation ---
    if (!newBreakSchedule.break_id || !newBreakSchedule.break_type || !newBreakSchedule.break_start_date || !newBreakSchedule.break_end_date) {
      setLocalError('Vui lòng điền đầy đủ thông tin!');
      return;
    }

    const startDate = new Date(newBreakSchedule.break_start_date);
    const endDate = new Date(newBreakSchedule.break_end_date);
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Reset time for accurate date comparison

    const maxFutureDate = new Date(today);
    maxFutureDate.setFullYear(today.getFullYear() + 5);

    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) { // Use .getTime() for robust NaN check
      setLocalError('Định dạng ngày không hợp lệ!');
      return;
    }

    if (startDate > endDate) {
      setLocalError('Thời gian bắt đầu không được lớn hơn thời gian kết thúc!');
      return;
    }

    if (startDate < today) {
      setLocalError('Thời gian bắt đầu không được ở quá khứ!');
      return;
    }

    if (endDate > maxFutureDate) {
      setLocalError('Thời gian kết thúc không được quá 5 năm trong tương lai!');
      return;
    }

    const isDuplicate = existingBreakSchedules.some((schedule) => schedule.break_id === newBreakSchedule.break_id);
    if (isDuplicate) {
      setLocalError(`Mã lịch nghỉ "${newBreakSchedule.break_id}" đã tồn tại!`);
      return;
    }

    const scheduleToAdd = {
      ...newBreakSchedule,
      // id: Date.now(), // ID should ideally be generated by the backend
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };

    // Call the parent component's add function
    // Assume onAddBreakSchedule is an async function that handles API call
    await onAddBreakSchedule(scheduleToAdd);

    // Reset form and close modal only if no API error occurred
    // The `apiError` prop from parent component should reflect API errors
    if (!apiError && !loading) { // Check both local and API error state
      setNewBreakSchedule({
        break_id: '',
        break_type: '',
        break_start_date: '',
        break_end_date: '',
        status: 'Hoạt động',
      });
      setLocalError('');
      onClose();
    }
  };

  const handleImportExcel = async (e) => {
    const file = e.target.files[0];
    if (!file) {
      setLocalError('Vui lòng chọn một file Excel!');
      return;
    }

    const validExtensions = ['.xlsx', '.xls'];
    const fileExtension = file.name.slice(file.name.lastIndexOf('.')).toLowerCase();
    if (!validExtensions.includes(fileExtension)) {
      setLocalError('Chỉ hỗ trợ file Excel (.xlsx, .xls)!');
      e.target.value = ''; // Clear file input
      return;
    }

    try {
      setLocalError(''); // Clear previous errors
      const arrayBuffer = await file.arrayBuffer();
      const workbook = XLSX.read(arrayBuffer, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

      if (rawData.length < 2) {
        setLocalError('File Excel phải có ít nhất 2 dòng (header + dữ liệu)!');
        e.target.value = '';
        return;
      }

      const headers = rawData[0];
      const expectedHeader = ['Mã lịch nghỉ', 'Loại lịch nghỉ', 'Thời gian bắt đầu', 'Thời gian kết thúc', 'Trạng thái'];

      // Case-insensitive header check
      const lowerCaseHeaders = headers.map(h => String(h).toLowerCase().trim());
      const lowerCaseExpectedHeader = expectedHeader.map(h => String(h).toLowerCase().trim());

      if (!lowerCaseExpectedHeader.every(expectedH => lowerCaseHeaders.includes(expectedH))) {
        setLocalError(`Định dạng cột không đúng! Cần các cột: ${expectedHeader.join(', ')}`);
        e.target.value = '';
        return;
      }

      const dataRows = rawData.slice(1);
      const jsonData = dataRows.map(row => {
        const obj = {};
        headers.forEach((header, index) => {
          obj[String(header).trim()] = row[index] || ''; // Use trimmed header as key
        });
        return obj;
      });

      const processedData = jsonData.map((row, index) => {
        const schedule = {
          break_id: row['Mã lịch nghỉ'] || '',
          break_type: row['Loại lịch nghỉ'] || '',
          break_start_date: row['Thời gian bắt đầu'] ? new Date(row['Thời gian bắt đầu']).toISOString().split('T')[0] : '', // Convert Excel date to YYYY-MM-DD
          break_end_date: row['Thời gian kết thúc'] ? new Date(row['Thời gian kết thúc']).toISOString().split('T')[0] : '', // Convert Excel date to YYYY-MM-DD
          status: row['Trạng thái'] || 'Hoạt động',
          rowIndex: index + 2,
          errors: [],
        };

        // --- Validation for imported data ---
        if (!schedule.break_id || !schedule.break_type || !schedule.break_start_date || !schedule.break_end_date) {
          schedule.errors.push('missing_required');
        }

        const startDate = new Date(schedule.break_start_date);
        const endDate = new Date(schedule.break_end_date);
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const maxFutureDate = new Date(today);
        maxFutureDate.setFullYear(today.getFullYear() + 5);

        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
          schedule.errors.push('invalid_date_format');
        } else {
          if (startDate > endDate) {
            schedule.errors.push('start_after_end');
          }
          if (startDate < today) {
            schedule.errors.push('start_in_past');
          }
          if (endDate > maxFutureDate) {
            schedule.errors.push('end_too_far_future');
          }
        }

        if (!validStatuses.includes(schedule.status)) {
          schedule.errors.push('invalid_status');
        }

        const isDuplicateExisting = existingBreakSchedules.some(s => s.break_id === schedule.break_id);
        if (isDuplicateExisting) {
          schedule.errors.push('duplicate_id_existing');
        }

        // Check for duplicates within the imported data itself
        const isDuplicateInPreview = processedData.slice(0, index).some(s => s.break_id === schedule.break_id);
        if (isDuplicateInPreview) {
          schedule.errors.push('duplicate_id_in_file');
        }

        return schedule;
      });

      // Filter out rows with critical errors to present a cleaner preview
      const validPreviewData = processedData.filter(item => item.errors.length === 0);

      if (validPreviewData.length === 0) {
        setLocalError('Không có dữ liệu hợp lệ nào được tìm thấy trong file Excel sau khi kiểm tra!');
        e.target.value = '';
        return;
      }

      setPreviewData(processedData); // Send all data including errors to PreviewModal for detailed display
      setShowPreview(true);
      // Optionally close the current modal if you want to immediately show the preview
      // onClose();

    } catch (error) {
      console.error('Error reading Excel file:', error);
      setLocalError('Lỗi khi đọc file Excel! Vui lòng kiểm tra định dạng hoặc nội dung file.');
    } finally {
      e.target.value = ''; // Always clear file input
    }
  };

  const handleImportSuccessCallback = (result) => {
    // This callback is from PreviewBreakScheduleModal after it attempts to import
    if (result && result.message) {
      // If PreviewBreakScheduleModal returns a message, display it
      // Assuming result.message covers both success and failure summary
      // You might want to pass a success message to the parent for global alert
    }
    onImportSuccess(); // Call the parent's function to re-fetch data
    setShowPreview(false);
    setPreviewData([]);
  };

  const handleClosePreview = () => {
    setShowPreview(false);
    setPreviewData([]);
  };

  return (
    <>
      <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
        {/* Header của Dialog */}
        <DialogTitle sx={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          backgroundColor: 'primary.main', // Sử dụng màu chủ đạo từ theme
          color: 'white',
          p: 2,
        }}>
          <Typography variant="h6" fontWeight="bold">
            THÊM LỊCH NGHỈ MỚI
          </Typography>
          <IconButton
            aria-label="close"
            onClick={onClose}
            sx={{ color: 'white' }}
            disabled={loading} // Disable close button during loading
          >
            <CloseIcon />
          </IconButton>
        </DialogTitle>

        <DialogContent sx={{ p: 3, mt: 1 }}>
          {(apiError || localError) && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {apiError || localError}
            </Alert>
          )}
          {apiMessage && ( // Display API success message if available
            <Alert severity="success" sx={{ mb: 2 }}>
              {apiMessage}
            </Alert>
          )}


          {/* Form nhập liệu thủ công */}
          <Box sx={{
            display: 'grid',
            gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' }, // Responsive grid
            gap: 2,
            mt: 2,
            }}>
            <TextField
              label="Mã lịch nghỉ"
              name="break_id"
              value={newBreakSchedule.break_id}
              onChange={handleChange}
              fullWidth
              variant="outlined"
              required
              size="small"
              disabled={loading}
            />
            <TextField
              label="Loại lịch nghỉ"
              name="break_type"
              value={newBreakSchedule.break_type}
              onChange={handleChange}
              fullWidth
              variant="outlined"
              required
              size="small"
              disabled={loading}
            />
            <TextField
              label="Thời gian bắt đầu"
              name="break_start_date"
              type="date"
              value={newBreakSchedule.break_start_date}
              onChange={handleChange}
              fullWidth
              variant="outlined"
              required
              InputLabelProps={{ shrink: true }}
              size="small"
              disabled={loading}
            />
            <TextField
              label="Thời gian kết thúc"
              name="break_end_date"
              type="date"
              value={newBreakSchedule.break_end_date}
              onChange={handleChange}
              fullWidth
              variant="outlined"
              required
              InputLabelProps={{ shrink: true }}
              size="small"
              disabled={loading}
            />
            <FormControl fullWidth required size="small" sx={{ gridColumn: { sm: 'span 2' } }}>
              <InputLabel>Trạng thái</InputLabel>
              <Select
                name="status"
                value={newBreakSchedule.status}
                onChange={handleChange}
                label="Trạng thái"
                disabled={loading}
              >
                <MenuItem value="Hoạt động">Hoạt động</MenuItem>
                <MenuItem value="Ngừng hoạt động">Ngừng hoạt động</MenuItem>
              </Select>
            </FormControl>
          </Box>
        </DialogContent>

        <DialogActions sx={{ p: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          {/* Nút Nhập từ Excel nằm riêng biệt và nổi bật */}
          <Box>
            <label htmlFor="excel-upload-button">
              <input
                id="excel-upload-button"
                type="file"
                accept=".xlsx, .xls"
                hidden
                onChange={handleImportExcel}
                disabled={loading}
              />
              <Button
                variant="contained"
                component="span"
                startIcon={<CloudUploadIcon />}
                sx={{ backgroundColor: '#28a745', '&:hover': { backgroundColor: '#218838' } }} // Green color for import
                disabled={loading}
              >
                Nhập từ Excel
              </Button>
            </label>
          </Box>

          {/* Các nút hành động chính */}
          <Box sx={{ display: 'flex', gap: 1 }}>
            <Button onClick={onClose} variant="outlined" color="inherit" disabled={loading}>
              Hủy bỏ
            </Button>
            <Button
              onClick={handleSubmit}
              variant="contained"
              color="primary" // Using primary color from theme
              disabled={loading}
              startIcon={loading ? <CircularProgress size={20} color="inherit" /> : null}
            >
              {loading ? 'Đang thêm...' : 'Thêm lịch nghỉ'}
            </Button>
          </Box>
        </DialogActions>
      </Dialog>

      {/* Preview Modal */}
      <PreviewBreakScheduleModal
        open={showPreview}
        onClose={handleClosePreview}
        previewData={previewData}
        onImportSuccess={handleImportSuccessCallback} // Pass the callback to PreviewModal
        existingBreakSchedules={existingBreakSchedules} // Pass existing schedules for validation in preview
        onAddBreakSchedule={onAddBreakSchedule} // Pass this if PreviewModal directly adds items
      />
    </>
  );
}