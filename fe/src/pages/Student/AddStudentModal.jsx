import React, { useState } from 'react';
import {
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    Typography,
    TextField,
    Button,
    Box,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Alert,
    CircularProgress,
    IconButton, // Thêm IconButton cho nút đóng
    Divider,
    Avatar, // Thêm Divider để phân cách
} from '@mui/material';
import CloseIcon from '@mui/icons-material/Close'; // Icon đóng modal
import CloudUploadIcon from '@mui/icons-material/CloudUpload'; // Icon tải file lên
import * as XLSX from 'xlsx';
import PreviewStudentModal from './PreviewStudentModal';
import { processExcelDataStudent } from '../../utils/ExcelValidation';

export default function AddStudentModal({ open, onClose, onAddStudent, existingStudents, error, loading, message, fetchStudents, classes }) {
    const [newStudent, setNewStudent] = useState({
        student_id: '',
        name: '',
        email: '',
        day_of_birth: '',
        gender: '',
        address: '',
        phone_number: '',
        class_id: '',
        admission_year: '',
        status: 'Đang học',
    });

    const [localError, setLocalError] = useState('');
    const [showPreview, setShowPreview] = useState(false);
    const [previewData, setPreviewData] = useState([]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setNewStudent((prev) => ({ ...prev, [name]: value }));
        setLocalError(''); // Clear local errors when user starts typing
    };

    const handleSubmit = async () => {
        // --- Client-side validation ---
        if (
            !newStudent.student_id ||
            !newStudent.name ||
            !newStudent.email ||
            !newStudent.day_of_birth ||
            !newStudent.gender ||
            !newStudent.address ||
            !newStudent.phone_number ||
            !newStudent.class_id ||
            !newStudent.admission_year
        ) {
            setLocalError('Vui lòng điền đầy đủ thông tin!');
            return;
        }

        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(newStudent.email)) {
            setLocalError('Email không hợp lệ!');
            return;
        }

        const phoneRegex = /^[0-9]{10,11}$/;
        if (!phoneRegex.test(newStudent.phone_number)) {
            setLocalError('Số điện thoại không hợp lệ (10-11 chữ số)!');
            return;
        }

        const isDuplicateId = existingStudents.some(
            (student) => student.student_id === newStudent.student_id
        );
        if (isDuplicateId) {
            setLocalError(`Mã học viên "${newStudent.student_id}" đã tồn tại!`);
            return;
        }

        const isEmailDuplicate = existingStudents.some(
            (student) => student.email === newStudent.email
        );
        if (isEmailDuplicate) {
            setLocalError(`Email "${newStudent.email}" đã tồn tại!`);
            return;
        }

        const isPhoneDuplicate = existingStudents.some(
            (student) => student.phone_number === newStudent.phone_number
        );
        if (isPhoneDuplicate) {
            setLocalError(`Số điện thoại "${newStudent.phone_number}" đã tồn tại!`);
            return;
        }

        const birthDate = new Date(newStudent.day_of_birth);
        const admissionDate = new Date(newStudent.admission_year); // Use admission_year as a date

        const today = new Date();
        today.setHours(0, 0, 0, 0); // Reset time for accurate date comparison

        if (birthDate >= today) {
            setLocalError('Ngày sinh không hợp lệ (không được là ngày tương lai hoặc hôm nay)!');
            return;
        }
        // Validate age (e.g., student must be at least 6 years old)
        const minBirthDateForStudent = new Date();
        minBirthDateForStudent.setFullYear(minBirthDateForStudent.getFullYear() - 6);
        if (birthDate > minBirthDateForStudent) {
            setLocalError('Học viên phải đủ 6 tuổi!');
            return;
        }


        if (admissionDate > today) {
            setLocalError('Ngày nhập học không được là ngày tương lai!');
            return;
        }

        // Admission date must not be before birth date
        if (admissionDate < birthDate) {
            setLocalError('Ngày nhập học không thể trước ngày sinh!');
            return;
        }

        const studentToAdd = {
            ...newStudent,
            // id: Date.now(), // ID should ideally be generated by the backend
            google_id: null, // Assuming this is handled by backend or not used for manual entry
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
        };

        // Call the parent component's add function
        await onAddStudent(studentToAdd);

        setNewStudent({
            student_id: '',
            name: '',
            email: '',
            day_of_birth: '',
            gender: '',
            address: '',
            phone_number: '',
            class_id: '',
            admission_year: '',
            status: 'Đang học',
        });
        setLocalError('');
        onClose();
    };

    const handleImportExcel = async (e) => {
        const file = e.target.files[0];
        if (!file) {
            setLocalError('Vui lòng chọn một file Excel!');
            return;
        }

        const validExtensions = ['.xlsx', '.xls'];
        const fileExtension = file.name.slice(file.name.lastIndexOf('.')).toLowerCase();
        if (!validExtensions.includes(fileExtension)) {
            setLocalError('Chỉ hỗ trợ file Excel (.xlsx, .xls)!');
            e.target.value = ''; // Clear file input
            return;
        }

        try {
            setLocalError(''); // Clear previous errors

            const arrayBuffer = await file.arrayBuffer();
            const workbook = XLSX.read(arrayBuffer, { type: 'array' });
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];

            const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

            if (rawData.length < 2) {
                setLocalError('File Excel phải có ít nhất 2 dòng (header + dữ liệu)!');
                e.target.value = '';
                return;
            }

            const headers = rawData[0];
            const dataRows = rawData.slice(1);

            const jsonData = dataRows.map(row => {
                const obj = {};
                headers.forEach((header, index) => {
                    obj[header] = row[index] || '';
                });
                return obj;
            });

            const processedData = processExcelDataStudent(jsonData, existingStudents);

            if (processedData.length === 0) {
                setLocalError('Không có dữ liệu hợp lệ nào được tìm thấy trong file Excel!');
                e.target.value = '';
                return;
            }

            setPreviewData(processedData);
            setShowPreview(true);
            // onClose(); // Consider if you want to close the main modal when opening preview
        } catch (error) {
            console.error('Error reading Excel file:', error);
            setLocalError('Lỗi khi đọc file Excel! Vui lòng kiểm tra định dạng hoặc nội dung file.');
        } finally {
            e.target.value = ''; // Always clear file input
        }
    };

    const handleClosePreview = () => {
        setShowPreview(false);
        setPreviewData([]);
    };

    return (
        <>
            <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
                {/* Header của Dialog */}
                <DialogTitle sx={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    backgroundColor: 'primary.main',
                    color: 'white',
                    p: 2,
                }}>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Avatar
                            src="https://sanvieclamcantho.com/upload/imagelogo/trung-tam-cong-nghe-phan-mem-dai-hoc-can-tho1573111986.png"
                            alt="Logo"
                            sx={{
                                width: 40, // Kích thước nhỏ hơn một chút
                                height: 40,
                                mr: 1.5, // Khoảng cách với tiêu đề
                                border: '2px solid white',
                                boxShadow: 1
                            }}
                        />
                        <Typography variant="h6" fontWeight="bold">
                            THÊM HỌC VIÊN MỚI
                        </Typography>
                    </Box>
                    <IconButton
                        aria-label="close"
                        onClick={onClose}
                        sx={{ color: 'white' }}
                    >
                        <CloseIcon />
                    </IconButton>
                </DialogTitle>

                <DialogContent sx={{ p: 3 }}>
                    {(error || localError) && (
                        <Alert severity="error" sx={{ mb: 2 }}>
                            {error || localError}
                        </Alert>
                    )}
                    {message && (
                        <Alert severity="success" sx={{ mb: 2 }}>
                            {message}
                        </Alert>
                    )}

                    {/* Form nhập liệu thủ công */}
                    <Box sx={{
                        display: 'grid',
                        gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' }, // Responsive grid
                        gap: 2,
                        mt: 2,
                    }}>
                        <TextField
                            label="Mã học viên"
                            name="student_id"
                            value={newStudent.student_id}
                            onChange={handleChange}
                            fullWidth
                            variant="outlined"
                            required
                            size="small"
                        />
                        <TextField
                            label="Họ tên"
                            name="name"
                            value={newStudent.name}
                            onChange={handleChange}
                            fullWidth
                            variant="outlined"
                            required
                            size="small"
                        />
                        <TextField
                            label="Email"
                            name="email"
                            type="email"
                            value={newStudent.email}
                            onChange={handleChange}
                            fullWidth
                            variant="outlined"
                            required
                            size="small"
                        />
                        <TextField
                            label="Ngày sinh"
                            name="day_of_birth"
                            type="date"
                            value={newStudent.day_of_birth}
                            onChange={handleChange}
                            fullWidth
                            variant="outlined"
                            required
                            InputLabelProps={{ shrink: true }}
                            size="small"
                        />
                        <FormControl fullWidth required size="small">
                            <InputLabel>Giới tính</InputLabel>
                            <Select
                                name="gender"
                                value={newStudent.gender}
                                onChange={handleChange}
                                label="Giới tính"
                            >
                                <MenuItem value="Nam">Nam</MenuItem>
                                <MenuItem value="Nữ">Nữ</MenuItem>
                            </Select>
                        </FormControl>
                        <TextField
                            label="Số điện thoại"
                            name="phone_number"
                            value={newStudent.phone_number}
                            onChange={handleChange}
                            fullWidth
                            variant="outlined"
                            required
                            size="small"
                        />
                        <TextField
                            label="Địa chỉ"
                            name="address"
                            value={newStudent.address}
                            onChange={handleChange}
                            fullWidth
                            variant="outlined"
                            required
                            sx={{ gridColumn: { sm: 'span 2' } }} // Span 2 columns on small screens and up
                            size="small"
                        />
                        <FormControl fullWidth required>
                            <InputLabel>Mã lớp</InputLabel>
                            <Select
                                name="class_id"
                                value={newStudent.class_id}
                                onChange={handleChange}
                                label="Mã lớp"
                            >
                                {classes && classes.length > 0 ? (
                                    classes.map((c) => (
                                        <MenuItem key={c.class_id} value={c.class_id}>
                                            {c.class_id} - {c.class_name}
                                        </MenuItem>
                                    ))
                                ) : (
                                    <MenuItem disabled>
                                        <em>Không có lớp nào</em>
                                    </MenuItem>
                                )}
                            </Select>
                        </FormControl>
                        <TextField
                            label="Ngày nhập học"
                            name="admission_year"
                            type="date"
                            value={newStudent.admission_year}
                            onChange={handleChange}
                            fullWidth
                            variant="outlined"
                            required
                            InputLabelProps={{ shrink: true }}
                            size="small"
                        />
                        <FormControl fullWidth required size="small">
                            <InputLabel>Trạng thái</InputLabel>
                            <Select
                                name="status"
                                value={newStudent.status}
                                onChange={handleChange}
                                label="Trạng thái"
                            >
                                <MenuItem value="Đang học">Đang học</MenuItem>
                                <MenuItem value="Đã nghỉ học">Đã nghỉ học</MenuItem>
                                <MenuItem value="Đã tốt nghiệp">Đã tốt nghiệp</MenuItem>
                                <MenuItem value="Bảo lưu">Bảo lưu</MenuItem>
                            </Select>
                        </FormControl>
                    </Box>
                </DialogContent>

                <DialogActions sx={{ p: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    {/* Nút Nhập từ Excel nằm riêng biệt và nổi bật */}
                    <Box>
                        <label htmlFor="excel-upload-button">
                            <input
                                id="excel-upload-button"
                                type="file"
                                accept=".xlsx, .xls"
                                hidden
                                onChange={handleImportExcel}
                            />
                            <Button
                                variant="contained"
                                component="span"
                                startIcon={<CloudUploadIcon />}
                                sx={{ backgroundColor: '#28a745', '&:hover': { backgroundColor: '#218838' } }} // Green color for import
                            >
                                Nhập từ Excel
                            </Button>
                        </label>
                    </Box>

                    {/* Các nút hành động chính */}
                    <Box sx={{ display: 'flex', gap: 1 }}>
                        <Button onClick={onClose} variant="outlined" color="inherit" disabled={loading}>
                            Hủy bỏ
                        </Button>
                        <Button
                            onClick={handleSubmit}
                            variant="contained"
                            color="primary" // Using primary color from theme
                            disabled={loading}
                            startIcon={loading ? <CircularProgress size={20} color="inherit" /> : null}
                        >
                            {loading ? 'Đang thêm...' : 'Thêm học viên'}
                        </Button>
                    </Box>
                </DialogActions>
            </Dialog>

            {/* Preview Modal */}
            <PreviewStudentModal
                open={showPreview}
                onClose={handleClosePreview}
                previewData={previewData}
                fetchStudents={fetchStudents}
                classes={classes}
            />
        </>
    );
}