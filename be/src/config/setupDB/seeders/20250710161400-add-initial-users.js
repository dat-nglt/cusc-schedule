'use strict';

import { v4 as uuidv4 } from "uuid";

export default {
  up: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();
    try {
      console.log("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y seeders...");

      const users = {
        admin: [
          { name: "Nguy·ªÖn L√™ T·∫•n ƒê·∫°t", email: "nguyenletandat.contact@gmail.com", type: "Super Admin" },
        ],
        training_officer: [
          { name: "Ph·∫°m Th·ªã D (C√°n b·ªô ƒêT)", email: "dhchuong@student.ctuet.edu.vn", department: "Ph√≤ng ƒê√†o t·∫°o", position: "Tr∆∞·ªüng ph√≤ng" },
        ],
        lecturer: [
          { id: "GV001", name: "Tr·∫ßn Th·ªã B", email: "lecturer1@example.com", department: "Khoa C√¥ng ngh·ªá th√¥ng tin", degree: "Ti·∫øn sƒ©", academic_rank: "Ph√≥ Gi√°o s∆∞", phone_number: "0901234567", gender: "N·ªØ", address: "C·∫ßn Th∆°", day_of_birth: "1980-05-15" },
          { id: "GV002", name: "Nguy·ªÖn VƒÉn A", email: "lecturer2@example.com", department: "Khoa C√¥ng ngh·ªá th√¥ng tin", degree: "Th·∫°c sƒ©", academic_rank: "Gi·∫£ng vi√™n ch√≠nh", phone_number: "0901234568", gender: "Nam", address: "H·ªì Ch√≠ Minh", day_of_birth: "1982-11-20" },
        ],
        student: [
          { student_id: "SV001", name: "L√™ VƒÉn C (Sinh vi√™n)", email: "student@example.com", admission_year: "2023-09-01", gpa: 3.5, class_id: "DH23CS" },
        ],
      };

      const createUsers = async (role, userData, tableName) => {
        console.log(`üëâ ƒêang t·∫°o accounts cho role: ${role}...`);
        const accounts = userData.map((user) => ({
          id: uuidv4(),
          email: user.email,
          role,
          google_id: null,
          status: "active",
          created_at: new Date(),
          updated_at: new Date(),
        }));
        await queryInterface.bulkInsert("accounts", accounts, { transaction });
        console.log(`‚úÖ ƒê√£ insert ${accounts.length} accounts cho role: ${role}`);

        const details = userData.map((user, index) => {
          const baseDetails = {
            account_id: accounts[index].id,
            created_at: new Date(),
            updated_at: new Date(),
          };
          switch (role) {
            case "admin":
              return { ...baseDetails, admin_id: "AD001", name: user.name, admin_type: user.type };
            case "lecturer":
              return { ...baseDetails, lecturer_id: user.id, name: user.name, department: user.department, hire_date: "2010-09-01", degree: user.degree, academic_rank: user.academic_rank, phone_number: user.phone_number, gender: user.gender, address: user.address, day_of_birth: user.day_of_birth, status: "active" };
            case "training_officer":
              return { ...baseDetails, staff_id: "CB001", name: user.name, department: user.department, position: user.position, status: "active" };
            case "student":
              return { ...baseDetails, student_id: user.student_id, name: user.name, class_id: user.class_id, admission_year: user.admission_year, gpa: user.gpa };
            default:
              return baseDetails;
          }
        });
        await queryInterface.bulkInsert(tableName, details, { transaction });
        console.log(`‚úÖ ƒê√£ insert ${details.length} b·∫£n ghi v√†o b·∫£ng ${tableName}`);
      };

      await createUsers("admin", users.admin, "admins");
      await createUsers("training_officer", users.training_officer, "training_officers");
      await createUsers("lecturer", users.lecturer, "lecturers");

      // Seed c√°c th·ª±c th·ªÉ ƒë·ªôc l·∫≠p ƒë·∫ßu ti√™n
      console.log("üëâ ƒêang insert programs...");
      await queryInterface.bulkInsert("programs", [
        { program_id: "CT001", program_name: "C√¥ng ngh·ªá Ph·∫ßn m·ªÅm", duration: 15, description: "Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o C√¥ng ngh·ªá Ph·∫ßn m·ªÅm", status: "active", created_at: new Date(), updated_at: new Date() },
        { program_id: "CT002", program_name: "Tr√≠ tu·ªá nh√¢n t·∫°o", duration: 15, description: "Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o Tr√≠ tu·ªá nh√¢n t·∫°o", status: "active", created_at: new Date(), updated_at: new Date() },
      ], { transaction });
      console.log("‚úÖ Insert programs th√†nh c√¥ng");

      console.log("üëâ ƒêang insert semesters...");
      await queryInterface.bulkInsert("semesters", [
        { semester_id: "HK1_2024", semester_name: "H·ªçc k·ª≥ 1, NƒÉm h·ªçc 2024-2025", start_date: "2024-09-01", end_date: "2024-12-31", status: "active", created_at: new Date(), updated_at: new Date() },
        { semester_id: "HK2_2024", semester_name: "H·ªçc k·ª≥ 2, NƒÉm h·ªçc 2024-2025", start_date: "2025-01-01", end_date: "2025-05-30", status: "pending", created_at: new Date(), updated_at: new Date() },
      ], { transaction });
      console.log("‚úÖ Insert semesters th√†nh c√¥ng");

      console.log("üëâ ƒêang insert subjects...");
      await queryInterface.bulkInsert("subjects", [
        { subject_id: "CS101", subject_name: "L·∫≠p tr√¨nh c∆° b·∫£n", credit: 3, theory_hours: 30, practice_hours: 15, status: "active", created_at: new Date(), updated_at: new Date() },
        { subject_id: "CS102", subject_name: "C·∫•u tr√∫c d·ªØ li·ªáu", credit: 4, theory_hours: 45, practice_hours: 15, status: "active", created_at: new Date(), updated_at: new Date() },
      ], { transaction });
      console.log("‚úÖ Insert subjects th√†nh c√¥ng");

      console.log("üëâ ƒêang insert courses, classes, students, break_schedule, rooms...");
      await queryInterface.bulkInsert("courses", [
        { course_id: "K2023", course_name: "Kh√≥a 2023-2027", start_date: "2023-09-01", end_date: "2027-08-31", status: "active", created_at: new Date(), updated_at: new Date() },
        { course_id: "K2022", course_name: "Kh√≥a 2022-2026", start_date: "2022-09-01", end_date: "2026-08-31", status: "active", created_at: new Date(), updated_at: new Date() },
      ], { transaction });

      // C·∫≠p nh·∫≠t l·∫°i classes ƒë·ªÉ li√™n k·∫øt v·ªõi programs v√† courses
      await queryInterface.bulkInsert("classes", [
        { class_id: "DH23CS", class_name: "ƒê·∫°i h·ªçc 23 C√¥ng ngh·ªá Ph·∫ßn m·ªÅm", class_size: 30, course_id: "K2023", program_id: "CT001", status: "active", created_at: new Date(), updated_at: new Date() },
        { class_id: "DH23AI", class_name: "ƒê·∫°i h·ªçc 23 Tr√≠ tu·ªá Nh√¢n t·∫°o", class_size: 30, course_id: "K2023", program_id: "CT002", status: "active", created_at: new Date(), updated_at: new Date() },
        { class_id: "DH22IT", class_name: "ƒê·∫°i h·ªçc 22 C√¥ng ngh·ªá Th√¥ng tin", class_size: 30, course_id: "K2022", program_id: "CT002", status: "active", created_at: new Date(), updated_at: new Date() },
      ], { transaction });

      await createUsers("student", users.student, "students");
      await queryInterface.bulkInsert("break_schedule", [
        { break_id: "TT001", break_start_date: "2025-01-20", break_end_date: "2025-02-10", number_of_days: 22, break_type: "Ngh·ªâ T·∫øt Nguy√™n ƒê√°n", description: "Ngh·ªâ T·∫øt Gi√°p Th√¨n", status: "active", created_at: new Date(), updated_at: new Date() },
        { break_id: "NL001", break_start_date: "2024-04-30", break_end_date: "2024-05-01", number_of_days: 2, break_type: "Ngh·ªâ l·ªÖ", description: "Ngh·ªâ l·ªÖ 30/4 v√† 1/5", status: "completed", created_at: new Date(), updated_at: new Date() },
      ], { transaction });
      await queryInterface.bulkInsert("rooms", [
        { room_id: "A101", room_name: "Ph√≤ng A101", location: "T·∫ßng 1 - T√≤a A", capacity: 50, status: "available", type: "theory", created_at: new Date(), updated_at: new Date() },
        { room_id: "A102", room_name: "Ph√≤ng A102", location: "T·∫ßng 1 - T√≤a A", capacity: 50, status: "available", type: "theory", created_at: new Date(), updated_at: new Date() },
      ], { transaction });

      // Th√™m d·ªØ li·ªáu cho c√°c b·∫£ng trung gian
      console.log("üëâ ƒêang insert program_semesters...");
      await queryInterface.bulkInsert("program_semesters", [
        { program_semester_id: "PS_CT001_HK1_2024", program_id: "CT001", semester_id: "HK1_2024", semester_number: 1, created_at: new Date(), updated_at: new Date() },
        { program_semester_id: "PS_CT002_HK1_2024", program_id: "CT002", semester_id: "HK1_2024", semester_number: 1, created_at: new Date(), updated_at: new Date() },
      ], { transaction });
      console.log("‚úÖ Insert program_semesters th√†nh c√¥ng");

      console.log("üëâ ƒêang insert program_subject_semesters...");
      await queryInterface.bulkInsert("program_subject_semesters", [
        { ps_semester_id: "PSS_PS_CT001_HK1_2024_CS101", program_semester_id: "PS_CT001_HK1_2024", subject_id: "CS101", created_at: new Date(), updated_at: new Date() },
        { ps_semester_id: "PSS_PS_CT001_HK1_2024_CS102", program_semester_id: "PS_CT001_HK1_2024", subject_id: "CS102", created_at: new Date(), updated_at: new Date() },
      ], { transaction });
      console.log("‚úÖ Insert program_subject_semesters th√†nh c√¥ng");

      await transaction.commit();
      console.log("üéâ Seeders have been successfully added!");
    } catch (error) {
      await transaction.rollback();
      console.error("‚ùå Error running seeders:", error);
      throw error;
    }
  },

  down: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();
    try {
      console.log("üóëÔ∏è B·∫Øt ƒë·∫ßu revert seeders...");
      // X√≥a theo th·ª© t·ª± ng∆∞·ª£c l·∫°i ƒë·ªÉ tr√°nh l·ªói kh√≥a ngo·∫°i
      await queryInterface.bulkDelete("students", null, { transaction });
      await queryInterface.bulkDelete("classes", null, { transaction });
      await queryInterface.bulkDelete("courses", null, { transaction });
      await queryInterface.bulkDelete("program_subject_semesters", null, { transaction });
      await queryInterface.bulkDelete("subjects", null, { transaction });
      await queryInterface.bulkDelete("program_semesters", null, { transaction });
      await queryInterface.bulkDelete("semesters", null, { transaction });
      await queryInterface.bulkDelete("programs", null, { transaction });
      await queryInterface.bulkDelete("lecturers", null, { transaction });
      await queryInterface.bulkDelete("admins", null, { transaction });
      await queryInterface.bulkDelete("training_officers", null, { transaction });
      await queryInterface.bulkDelete("rooms", null, { transaction });
      await queryInterface.bulkDelete("break_schedule", null, { transaction });
      await queryInterface.bulkDelete("accounts", null, { transaction });

      await transaction.commit();
      console.log("‚úÖ Seeders have been successfully reverted!");
    } catch (error) {
      await transaction.rollback();
      console.error("‚ùå Error reverting seeders:", error);
      throw error;
    }
  },
};