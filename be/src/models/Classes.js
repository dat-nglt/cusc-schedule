import { DataTypes } from "sequelize";

// ƒê·ªãnh nghƒ©a model Classes - ƒê·∫°i di·ªán cho m·ªôt l·ªõp h·ªçc
const Classes = (sequelize) => {
  const ClassesModel = sequelize.define(
    "Classes",
    {
      class_id: {
        type: DataTypes.STRING(30),
        primaryKey: true,
        allowNull: false,
      },
      class_name: {
        type: DataTypes.STRING(50),
        allowNull: true,
      },
      class_size: {
        type: DataTypes.SMALLINT,
        allowNull: true,
      },
      status: {
        type: DataTypes.STRING(30),
        allowNull: true,
      },
      course_id: {
        type: DataTypes.STRING(30),
        allowNull: true,
      },
      program_id: {
        type: DataTypes.STRING(30),
        allowNull: true,
      },
      created_at: {
        type: DataTypes.DATE,
        defaultValue: DataTypes.NOW,
        allowNull: false,
      },
      updated_at: {
        type: DataTypes.DATE,
        defaultValue: DataTypes.NOW,
        allowNull: false,
      },
      deleted_at: {
        // üëà th√™m c·ªôt n√†y
        type: DataTypes.DATE,
        allowNull: true,
      },
    },
    {
      tableName: "classes",
      timestamps: true,
      paranoid: true, // üëà b·∫≠t soft delete
      createdAt: "created_at",
      updatedAt: "updated_at",
      deletedAt: "deleted_at", // Sequelize s·∫Ω set gi√° tr·ªã khi x√≥a
    }
  );

  // Khai b√°o m·ªëi quan h·ªá (association)
  ClassesModel.associate = (models) => {
    // M·ªôt l·ªõp h·ªçc thu·ªôc v·ªÅ m·ªôt kh√≥a h·ªçc
    ClassesModel.belongsTo(models.Course, {
      foreignKey: "course_id",
      onUpdate: "CASCADE", // N·∫øu thay ƒë·ªïi ID kh√≥a h·ªçc, c·∫≠p nh·∫≠t theo
      onDelete: "SET NULL", // N·∫øu x√≥a kh√≥a h·ªçc, ƒë·ªÉ null tr∆∞·ªùng course_id
    });
    // M·ªôt l·ªõp h·ªçc c√≥ nhi·ªÅu sinh vi√™n
    ClassesModel.hasMany(models.Student, {
      foreignKey: "class_id", // Kh√≥a ngo·∫°i trong b·∫£ng Student tr·ªè v·ªÅ class_id
      onUpdate: "CASCADE", // N·∫øu thay ƒë·ªïi ID l·ªõp h·ªçc, c·∫≠p nh·∫≠t theo
      onDelete: "SET NULL",
    });
    ClassesModel.belongsTo(models.Program, {
      foreignKey: "program_id",
      onUpdate: "CASCADE", // N·∫øu thay ƒë·ªïi ID h·ªçc k·ª≥, c·∫≠p nh·∫≠t theo
      onDelete: "SET NULL", // N·∫øu x√≥a h·ªçc k·ª≥, ƒë·ªÉ null tr∆∞·ªùng program_id
    });
  };

  return ClassesModel;
};

export default Classes;
