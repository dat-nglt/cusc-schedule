import json
from typing import Dict, List, Any, Optional

def display_ga_progress(
    generation: int, 
    max_generations: int, 
    current_best_fitness: float, 
    overall_best_fitness: float,
    current_best_violations: Dict[str, Any],
    overall_best_violations: Dict[str, Any],
    log_interval: int = 10,
    return_json: bool = False
) -> Optional[Dict[str, Any]]:
    """
    Hi·ªÉn th·ªã ti·∫øn tr√¨nh v√† c√°c th√¥ng s·ªë c·ªßa thu·∫≠t to√°n di truy·ªÅn, bao g·ªìm chi ti·∫øt vi ph·∫°m.
    C√≥ th·ªÉ in ra console ho·∫∑c tr·∫£ v·ªÅ d·ªØ li·ªáu JSON ƒë·ªÉ giao di·ªán ng∆∞·ªùi d√πng (frontend) x·ª≠ l√Ω.
    
    Args:
        generation (int): Th·∫ø h·ªá hi·ªán t·∫°i.
        max_generations (int): T·ªïng s·ªë th·∫ø h·ªá t·ªëi ƒëa.
        current_best_fitness (float): Fitness t·ªët nh·∫•t c·ªßa th·∫ø h·ªá hi·ªán t·∫°i.
        overall_best_fitness (float): Fitness t·ªët nh·∫•t t√¨m ƒë∆∞·ª£c cho ƒë·∫øn nay.
        current_best_violations (Dict[str, Any]): Dictionary chi ti·∫øt vi ph·∫°m c·ªßa th·∫ø h·ªá hi·ªán t·∫°i.
        overall_best_violations (Dict[str, Any]): Dictionary chi ti·∫øt vi ph·∫°m c·ªßa gi·∫£i ph√°p t·ªët nh·∫•t to√†n c·ª•c.
        log_interval (int): Kho·∫£ng c√°ch c√°c th·∫ø h·ªá ƒë·ªÉ in ra console.
                            N·∫øu l√† 1, in m·ªói th·∫ø h·ªá. N·∫øu l√† 0 ho·∫∑c s·ªë √¢m, ch·ªâ in th·∫ø h·ªá ƒë·∫ßu/cu·ªëi.
        return_json (bool): N·∫øu True, h√†m s·∫Ω tr·∫£ v·ªÅ m·ªôt dictionary ch·ª©a d·ªØ li·ªáu thay v√¨ in ra console.
                            M·∫∑c ƒë·ªãnh l√† False.

    Returns:
        Optional[Dict[str, Any]]: Dictionary ch·ª©a c√°c th√¥ng s·ªë ti·∫øn tr√¨nh n·∫øu return_json l√† True,
                                  ng∆∞·ª£c l·∫°i l√† None (in ra console).
    """
    # Chu·∫©n b·ªã d·ªØ li·ªáu cho log/hi·ªÉn th·ªã
    progress_data = {
        "generation": generation,
        "progress_percentage": round((generation / max_generations) * 100, 2),
        "current_best_fitness": round(current_best_fitness, 2),
        "overall_best_fitness": round(overall_best_fitness, 2),
        "current_best_violations": current_best_violations,
        "overall_best_violations": overall_best_violations
    }

    # Tr·∫£ v·ªÅ JSON n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if return_json:
        return progress_data
    
    # In ra console ƒë·ªÉ theo d√µi tr·ª±c ti·∫øp
    # Ch·ªâ in khi ƒë·∫°t ƒë·∫øn log_interval, th·∫ø h·ªá ƒë·∫ßu ti√™n ho·∫∑c th·∫ø h·ªá cu·ªëi c√πng
    should_print = (
        (log_interval > 0 and (generation % log_interval == 0)) or
        (generation == 0) or
        (generation == max_generations - 1)
    )

    if should_print:
        # ƒê·ªãnh nghƒ©a m√†u s·∫Øc cho console
        RED = "\033[91m"
        GREEN = "\033[92m"
        YELLOW = "\033[93m"
        BLUE = "\033[94m"
        RESET = "\033[0m"

        # Hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh v√† c√°c ch·ªâ s·ªë ch√≠nh
        progress_bar_length = 50
        num_hashes = int(progress_data["progress_percentage"] / 100 * progress_bar_length)
        progress_bar = "#" * num_hashes + "-" * (progress_bar_length - num_hashes)
        
        f_current_color = GREEN if current_best_fitness >= overall_best_fitness else YELLOW
        f_overall_color = GREEN

        print(f"\r{BLUE}[{progress_bar}]{RESET} {progress_data['progress_percentage']:.2f}% "
              f"Th·∫ø h·ªá: {generation + 1}/{max_generations} "
              f"F_curr: {f_current_color}{current_best_fitness:.2f}{RESET} "
              f"F_overall: {f_overall_color}{overall_best_fitness:.2f}{RESET}", end='', flush=True)

    # In chi ti·∫øt vi ph·∫°m n·∫øu c√≥ c·∫£i ti·∫øn ƒë√°ng k·ªÉ (fitness t·ªët h∆°n)
    if current_best_fitness >= overall_best_fitness and overall_best_violations:
        print("\n" + "="*80)
        print(f"üéâ C·∫£i ti·∫øn ·ªü th·∫ø h·ªá {generation + 1}! ƒêi·ªÉm fitness t·ªët nh·∫•t: {overall_best_fitness:.2f}")

        # Ki·ªÉm tra xem c√≥ vi ph·∫°m n√†o kh√¥ng
        has_violations = any(count > 0 for count in overall_best_violations.values())
        
        if has_violations:
            print("Chi ti·∫øt vi ph·∫°m c·ªßa gi·∫£i ph√°p t·ªët nh·∫•t hi·ªán t·∫°i:")
            for violation, count in overall_best_violations.items():
                if count > 0:
                    print(f"  - ‚ùå {violation.replace('_', ' ').title()}: {int(count)} l·∫ßn")
        else:
            print(f"{GREEN}‚úÖ ƒê√£ t√¨m th·∫•y m·ªôt l·ªãch tr√¨nh kh√¥ng vi ph·∫°m r√†ng bu·ªôc c·ª©ng!{RESET}")
            
        print("="*80 + "\n")
    
    return None